commit 36a22c884f3439fd72bfc2268afd1c29364ffee8
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Fri Nov 1 15:24:03 2019 -0700

    Introduce WSTYLUS_MOBILE type for AES devices
    
    AES styli are distinct enough from the existing stylus classes to
    deserve one of their own. This class is named WSTYLUS_MOBILE both to
    reflect the fact that AES sensors are only found on tablet PCs and to
    allow the potential inclusion of other similar sensors which may not
    use AES tech.
    
    Stylus test cases are added to cover the future addition of AES styli
    to libwacom.
    
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>

diff --git a/libwacom/libwacom-database.c b/libwacom/libwacom-database.c
index ac9c281..a3fb3cd 100644
--- a/libwacom/libwacom-database.c
+++ b/libwacom/libwacom-database.c
@@ -98,6 +98,8 @@ type_from_str (const char *type)
 		return WSTYLUS_PUCK;
 	if (streq(type, "3D"))
 		return WSTYLUS_3D;
+	if (streq(type, "Mobile"))
+		return WSTYLUS_MOBILE;
 	return WSTYLUS_UNKNOWN;
 }
 
diff --git a/libwacom/libwacom.c b/libwacom/libwacom.c
index c4a50a8..ce66ae2 100644
--- a/libwacom/libwacom.c
+++ b/libwacom/libwacom.c
@@ -1293,6 +1293,7 @@ libwacom_print_stylus_description (int fd, const WacomStylus *stylus)
 		case WSTYLUS_STROKE:	type = "Stroke";	 break;
 		case WSTYLUS_PUCK:	type = "Puck";		break;
 		case WSTYLUS_3D:	type = "3D";		break;
+		case WSTYLUS_MOBILE:	type = "Mobile";	break;
 		default:		g_assert_not_reached();	break;
 	}
 
diff --git a/libwacom/libwacom.h b/libwacom/libwacom.h
index 8035e17..8cf6c92 100644
--- a/libwacom/libwacom.h
+++ b/libwacom/libwacom.h
@@ -159,6 +159,7 @@ typedef enum {
 	WSTYLUS_STROKE,
 	WSTYLUS_PUCK,
 	WSTYLUS_3D,
+	WSTYLUS_MOBILE,
 } WacomStylusType;
 
 /**
diff --git a/test/test-stylus-validity.c b/test/test-stylus-validity.c
index db628cb..849c205 100644
--- a/test/test-stylus-validity.c
+++ b/test/test-stylus-validity.c
@@ -53,6 +53,7 @@ test_type(gconstpointer data)
 	case WSTYLUS_STROKE:
 	case WSTYLUS_PUCK:
 	case WSTYLUS_3D:
+	case WSTYLUS_MOBILE:
 		break;
 	case WSTYLUS_UNKNOWN:
 	default:
@@ -60,6 +61,14 @@ test_type(gconstpointer data)
 	}
 }
 
+static void
+test_mobile(gconstpointer data)
+{
+	const WacomStylus *stylus = data;
+
+	g_assert_cmpint(libwacom_stylus_get_type(stylus), ==, WSTYLUS_MOBILE);
+}
+
 static void
 test_eraser(gconstpointer data)
 {
@@ -202,6 +211,21 @@ _add_test(const WacomStylus *stylus, GTestDataFunc func, const char *funcname)
 #define add_test(stylus, func_) \
 	_add_test(stylus, func_, #func_)
 
+static void
+setup_aes_tests(const WacomStylus *stylus)
+{
+	add_test(stylus, test_mobile);
+
+	add_test(stylus, test_pressure);
+	add_test(stylus, test_no_distance);
+
+	if (libwacom_stylus_get_id(stylus) < 0x8000) {
+		add_test(stylus, test_no_tilt);
+	} else {
+		add_test(stylus, test_tilt);
+	}
+}
+
 static void
 setup_emr_tests(const WacomStylus *stylus)
 {
@@ -260,6 +284,7 @@ setup_tests(const WacomStylus *stylus)
 		default:
 			switch (libwacom_stylus_get_id(stylus)) {
 				case 0x885:
+				case 0x8051:
 					add_test(stylus, test_no_buttons);
 					break;
 				default:
@@ -267,7 +292,12 @@ setup_tests(const WacomStylus *stylus)
 			}
 	}
 
-	setup_emr_tests(stylus);
+	/* Technology-specific tests */
+	if (libwacom_stylus_get_type(stylus) == WSTYLUS_MOBILE) {
+		setup_aes_tests(stylus);
+	} else {
+		setup_emr_tests(stylus);
+	}
 
 	if (libwacom_stylus_has_eraser(stylus))
 		add_test(stylus, test_eraser);
